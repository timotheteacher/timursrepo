git config --global user.name "timotheteacher"
git config --global user.email "youremail@gmail.com"

 

 git status             command to check the status of our files, if they are added or not.        

git add .                   - adds all files to the staging area
git log                     - command to check a hqistory of our commits (our saved files)

COMMIT - MEANS SAVE FILES AND ADD MESSGAGE. 
git commit -m "message"         - commits the files to the local repository


git push - pushes the files to the remote repository        

in the file itself after you done changes run "command + S" - to save file 
        for WINDOWS USERS "CONTROL + S" to save 

IN GIT WE HAVE 3 STAGES: 
    1. WORKING STAGE - FILES THAT ARE NOT ADDED
    2. STAGING -   AFTER WHEN WE RUN COMMAND "GIT ADD ."  - NOW FILES ARE STAGED 
    3 COMMIT - COMMITED (SAVED FILES)


FILES ALSO CAN 3 STATES:  (3 SOSTOYANIYA)
    1. UNMODIFIED 
    2. MODIFIED 
    3. STAGED 

WHEN WE RUN COMMAND GIT LOG WE SEE: 
1. COMMIT ID  (COMMIT SHA/HASH)2
2. (HEAD -> master or main) -  it means your branch taht you work on, and last commit. 
3. author - who made the commit
4. date - when the commit was made
5. commit message - what the commit is about

 git commit --amend         - command to change the message of the commit
 git reset ID_OF_THE_COMMIT         - command to delete commit. 
git rebase       - rebase to rewrite the history of the commits. 
    git rebase -i --root 
git branch -a           - command to show all existing branches
git checkout -b "branchname"            - to create a branch 
git checkout "desired_branch"  - command to switch between branches    
git merge "branchname"      - command to merge second branch to master/main. COMMAND HAS TO BE DONE FROM THE MAIN/MASTER BRANCH.


                                    GIT FLOW -  STRATEGY HOW ALL COMPANIES WORK: 
1. OFF OF MAIN/MASTER WE CREATE A FEATURE BRANCH (IT HAS A CODE FROM OUR MAIN BRANCH)
2. WE DO OUR WORK IN THE FEATURE BRANCH
3. WHEN WE ARE FINISHED WE MERGE THE FEATURE BRANCH TO THE MAIN/MASTER BRANCH
4. AND THEN DELETE THE FEATURE BRANCH 

git clean -f -d  - to delete all untracked files/folders 
git clean -d -f  - to forcefully delete folders 
